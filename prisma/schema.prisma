datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
  DELETED
}

enum OrderStatus {
  CREATED
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  EXPIRED
  REFUND_REQUESTED
  REFUNDED
}

enum TicketStatus {
  PENDING
  CANCELLED
  SCANNED
  VALIDATED
  BANNED
  REFUND_REQUESTED
  REFUNDED
}

model Order {
  id               String      @id @default(cuid())
  stripeSession    String      @unique
  name             String?
  email            String
  subtotal         Decimal     @db.Decimal(10, 2)
  totalAmount      Decimal     @db.Decimal(10, 2)
  shippingAmount   Decimal?    @db.Decimal(10, 2)
  discountAmount   Decimal?    @default(0) @db.Decimal(10, 2)
  shippingRequired Boolean
  shippingAddress  Json?
  items            Json
  metadata         Json?
  status           OrderStatus @default(CREATED)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  tickets Ticket[]

  @@index([stripeSession])
  @@index([email])
}

model Ticket {
  shortId          String       @unique
  id               String       @id @default(cuid())
  orderId          String
  order            Order        @relation(fields: [orderId], references: [id])
  eventId          String
  eventName        String
  ticketHolderName String
  ticketPayerEmail String
  ticketHash       String       @unique
  scanCount        Int          @default(0)
  price            Decimal      @db.Decimal(10, 2)
  qrContent        Json?
  metadata         Json?
  attended         Boolean      @default(false)
  status           TicketStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([ticketHash])
  @@index([eventId])
  @@index([ticketPayerEmail])
  @@index([orderId])
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  name          String?
  passwordHash  String?
  image         String?
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLoginAt   DateTime?

  sessions  Session[]
  userRoles UserRole[]

  @@index([email])
  @@index([status])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  permissions String[]
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles UserRole[]

  @@index([slug])
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}
